#   This project is made by Ye Hua (Edward) Tan in June, 2016. The assignment is entirely purposed for grading of
# Assignment 2 of Spring 2016, CS349, at University of Waterloo. Acknowledgement goes to University of Waterloo
# CS349 lecture materials and staff, CS349 anonymous students who actively answer questions on Piazza, Java Library
# documents, and Oracle's Java tutorial website. If you wish to use this project beyond grading purposes, 
# please contact the author. You're welcome to use this as reference materials.


#   This document will summarize all required specs of this software and the fundamental use. Also discuss some 
# design decisions made in this software that fix some pre-exiting issue. It also includes some unfrequent problem
# that may occur and some suggestions and alternatives to relax these problems.


JSketch

1.0 Introduction

  JSketch is a Basic Paint application that supports drawing, layering, editing fundamental shapes. The application also
introduced .ximage format that save data uniquely used by this application. The software is built using Java SE 1.8.0.91 
and programmed on Mac OSX 10.11.2 and it is tested on both Mac OS and linux environment. 
  JSketch includes some fundamental Java UI library such as Swing, AWT, and also uses other utilities such as Shapes and
File IO. JSketch Combined multiple fundamental Java Widgets and used Layout Mangers to manage interface resizing and visual
organizatoin. 
  This document will completely describe all functionality provided by this application.

2.0 Required Environment and Installation

  The application support all platforms with Java Version 1.8.0.91 support. However the UI look-and-feel may varies based on
the operating system.

  2.1 Installation

    In command environment, use the below command under the current directory of the package to install the software:

	$ make

    To run the applicatoin:
	
	$ make run

    Once the application is done and no longer needed, use below instruction to clean-up files:
 	
	$ make clean

    Note that clean method only cleans up the current instant of the software, it does not remove any .ximage file that's 
    generated by the software.

3.0 Basic Operation Menu:

  The menu consist of below contents:
	- File
 	   - New
	   - Save
	   - Load
	- View
	   - View Mode
	   - Lock Content


  3.1 Files
	Files consist of the three fundamental functions:
		- Saving
		- Loading
		- New Project

 	When user clicked on new files, the user will recieve an alert to save their current file (regardless of any previous usage, 
      that means, it would be asked even if user has not made any interaction to the Drawing Canvas). If User tapped on Yes, they would
      enter the File saving flow of the app. If user clicked "No", the current image will be removed and set to a new one. If "canceled", 
      user remains at the current image. 

	When user clicked on save, the user will be brought a file selector. All files in the selector is grayed, but user however is able
      to replace their file with any file listed (not recomanded). If the user type a new file name under the name entry, the software will
      generates a new file under the selected directory. Note that user are not required to type extension .ximage to save, as it will be
      automatically appended (only happens if new files created).

  	When user clicked on load, the user will be again asked to save their current work, and brought to save follow. As soon as the save 
      flow finishes, the user will recieve a file selector again to select a ximage to load. User however are only restricted to load .ximage
      file as any other non-directories are grayed out and unclickable. 

   3.2 View
	View consist of overall layout management for the software:
		- View Mode
			- Fit to Size
			- Full Window
		- Lock Content

	View Mode is a submenu that contains two option:
		Fit to size allows the draw canvas to resize base on the proportion of the windows, the content within the canvas also
		Changes proportionally to the draw canvas. Note that the draw canvas are alawys kept in a uniform scale, thus the application
		only resizes when both x and y changes are sufficient.

		Full View sets the canvas to a fixed size regardless of the resize. This mode only changes the placement of the draw canvas.
		
		User can only select one mode from above, and the default is Full View. A small check black circle in front of the text will
		indicates which mode did user select. (Radio Button)

	Lock Content is a feature that allows user to freely move tool frames within the main canvas. Each tool frame (Tools, Colors and 
	Line Thickness) are implemented as a sub window. User may toggle off lock content to activatve repositioning. Once user lock the
	contents again, the frames will reposition back. Due to this functionality, the frames will not be positioned by the layout manager.

	Also, User may sometimes experience frames move out of window view, to compensate, user can lock their content back to recieve those
	frames.

	** Due to design problems where user should be able to have enough space to move the frames, The minimum required size for the windows are
	alawys larger than the canvas in fix mode, thus the scrolling support was always deactivated, and removed later in the design process.

	** In some occasion where the resize gets very quick (manually expand and shrink the windows in fraction of minutes), the handler may
	not capture all resize request, and may cause DrawCanvas reach out of bound. This however does not effect regular performance, and 
	should be considered as user abuse (where the app does not function with immediate expand and minimize). The portion will fix however when
	user perform standard resizing again. 

4.0 Draw Tools
	There are three Tool Frames consist of the following:
		Tool Bar : select drawing and other utilities
		Color : select colors
		Line Thickness: select thickness of the line during drawing.

	4.1 Tool Bar
		
		In tool bar, there are 6 fundamental tools for creating objectives, some will be dicussed in depth later:
			- Select (Arrow Key Image) : Select a shape, to perform shape editing.
			- Line (Line Image) : Create a Line from (X1, Y1) to (X2, Y2)
			- Rectangle (Rectangle Image) : Create a Rectangle with Diagonal Lines (X1, Y1) to (X2, Y2);
			- Circle (Circle Image): Create a Circle with diameter dx.
			- Eraser: tap on a shape to remove shapes
			- Paint: Fill the interior Color of the shape to the clicked shape. 

		Once the item is selected, the buttons will have a "pressed" look and feel, and the black image will change to blue.
		Users are only allowed to select one tool at a time.

		If otherwise explained, all above actions are done on mouse release.
		
		4.1.1 Select
		
		Select is the default tool for this application, It consist of three main functionality:
			- Repositioning Shapes
			- Editing border color of the shape
			- Editing border thickness of the shape

		When a shape is selected, a light, gray-white gradient colored border will appeared outside of the shape. This selection 
		also appears during creation of any shapes. 

		The when user pressed on a shape, they can immediately move its position. Upon release, the user can still move the position
		of the shape by dragging on the shape. If user taps a empty region and other shapes, the selection will be removed.

		Once user selected a shape, both Color Pallets and Line thickness will reflect the information based on the shape. User may change
		color and line thickness during selected.

		Line uses unique algorithm (Linear Equations) to approximate containments. However there are extreme cases where some lines are
		difficult to detect (Usually it gets difficult with steeper slope and thinner lines).

		4.1.2 Draw Shapes
		
		  Draw Shapes functionally works identical to any othe paint applications. We pay a special attention to Draw Circle. Draw Circle uses
		Draw Oval with uniform changes in both x and y, however the change will depend either on only change in x. This is made for simpicity of
		creating the shape, since the application provide more spaces on x-axis, we make assumptions that user will more likely to move on x-axis
		when performing uniform actions. Thus moving on y axis only (likely not on practical use) would not trigger a drawing animation on the 
		screen. 

		4.1.2 Erase, Paint, and Filling

		  Both erase and paint will be onclicked event, meaning the action triggers on to the shape when the tool is selected and clicked on the
		shape. When shapes are layered, the one on the higher level (will be dicussed in Layer section) will be triggered first. Filling a larger 
		exterior shape on a higher level will completely covers the inner shape. While erasing multiple shapes with large upper level shape will
		only erase the outer shape.

		  When shapes are first created, they are considered as not filled, and will be transparent (displaying any lower level shapes that's contained
		by this shape). Trying to erase the interior shapes in this case will only result erasing the outter shapes. Currently, there is no feature
		to revert a filled shape back to transparent.

	4.2 Color

	 This application support all color provided by constants in Java Color class, also there are 5 additional colors that's been randomly generated online. 
	(Color are always the same, but how I obtain the color is randomed).

	4.3 Thickness
	
	 This application provides 4 different strokes for user to select. To keep in mind that the strok itself does not offically considered as part of the shape, 
	meaning clicking on very edge of the scope would not satisfy containment unless the coordinate are caught during adjustings (see Focus Adjustment).


5.0 Graphic Rules

	This section mainly dicuss about the paint graphics. Since There are many off calculation with floating value dimensions and 2D pixel graphics. We mainly
	Solve these problems by approximation, but extreme cases may occur still. Below are some of the specs that requires these minor adjustment and will also
	explain some extreme mis-behaviours. 
	

	5.1 Proportionality

	  Requirement of the Assignment explicitly stated that fit to windows should changes the draw canvas proportional to its original size.

	  Since the application does not support uniform resizing (User should be able to freely expands either x or y spaces to fully utilize the tool bar 
	repositioning features). Thus resizing on either x or y axis will only change the draw canvas providing that there are enough free spacs on both
	x and y axis. Thus it will only resize to the minimum proportion of both x and y. 
      
 	  The scales are calculated in double, thus both canvas and shape within may be off by halve to one pixels. However this will not dramatically effects
	the graphic.
 

	5.2 Focus Adjustment 

	  Due to the nature of shapes and pixel graphics, testing containment may sometimes become inaccurate at the very edge of the shape with some shapes. For
	example lines does not have a containment.
	  To compansate, I added a few pixels of freedom for users to tap on the edge of the shape and recieve the object. 
	  For lines, the amount of freedom are determined by the steepness of the line. However this may still effect some extreme vertical lines with thin strokes 
	and edged touch. However most of the line should work fairly fluent by tapping their center.


	5.3 Layering
	
	  For simplicity of making, understanding and testing, the layering of the shape is LIFO (last in first out). Meaning the latest shape are considered to be
	on the highest layer and the oldest shape are positioned at the bottom.

6.0 .ximage file

	.ximage files are plain text files that record data only relevant to this application. 
	Few example of .ximage files are in the sample folder attached with the package.


